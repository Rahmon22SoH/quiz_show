---
description: Use this rule for backend and frontend development task
globs: *.html, *.js, *.py 
---
# Основное приложение │
FBA (Full-Stack Backend Architecture) - архитектура охватывает как бэкенд, так и фронтенд приложения.
|flask_project 
├───|app 
│ 	├── templates/
│ 	│   ├── base.html             # Основной шаблон сайта
│ 	│   ├── index.html            # Главная страница
│ 	│   ├── user.html             # Страница пользователя
│ 	│   ├── 404.html              # Страница ошибки 404
│ 	│   ├── 500.html              # Страница ошибки 500
│	│   ├── admin/
│ 	|   |   ├── 404.html          # Страница ошибки 404
│ 	|   |   ├── 500.html          # Страница ошибки 500
│ 	│   │   ├── base.html         # Базовый шаблон админки
│ 	│   │   ├── dashboard.html    # Панель управления
│ 	│   │   ├── logs.html         # Страница логов
│ 	│   │   ├── quizzes.html      # Управление викторинами - квизами
│ 	│   │   ├── users.html        # Управление пользователями
│ 	│   │   └── winners.html      # Страница победителей
│ 	│   │
│ 	│   ├── auth/                 # Шаблоны аутентификации
│ 	│   |   ├── login.html        # Страница входа 
│ 	│   |   ├── register.html     # Страница регистрации 
│ 	|   |   └── telegram_login.html # Страница регистрации telegram
│ 	│   ├── errors/               # Шаблоны c ошибками
│ 	│   |   └── error.html        # Страница c ошибками
│ 	|   ├── macros/
│ 	|   |     └── flash_messages.html # Страница всплывающих сообщений
│ 	│   ├── profile/              # Шаблоны профилем пользователя
│ 	│   │   ├── deposit.html      # Страница 
│ 	│   │   ├── edit.html         # Страница
│ 	│   │   ├── index.html        # Страница профиля
│ 	│   │   └── profile.html
│ 	│   └── quiz/                 # Шаблоны викторин - квизов
│ 	│       └── index.html        # Страница викторин - квизов
│ 	│   
│ 	│  
│ 	├── quiz/
│ 	│   ├── __init__.py           # Инициализация модуля викторин
│ 	│   ├── views.py              # Представления викторин
│ 	│   └── utils.py              # Вспомогательные функции
│ 	│
│ 	├── celery/
│ 	│   ├── __init__.py           # Инициализация Celery
│ 	│   ├── tasks.py              # Задачи Celery
│ 	│   └── beat_schedule.py      # Расписание периодических задач
│ 	│
│ 	├── static/
│ 	│   ├── css/                  # Стили CSS
│ 	│   ├── js/                   # JavaScript файлы
│ 	│   └── images/               # Изображения
│ 	│
│ 	├── admin/
│ 	│   ├── __init__.py           # Инициализация админ-модуля  
│ 	│   └── views.py              # Представления админки 
│ 	│
│ 	├── auth/                     # Шаблоны аутентификации
│ 	│   ├── __init__.py           # Инициализация модуля
│ 	│   ├── views.py              # Представления аутентификации 
│ 	│   ├── session.py            # Управление сессиями пользователей
│ 	│   └── auth_utils.py         # Вспомогательные функции
│ 	│
│ 	├── main/
│ 	│   ├── __init__.py           # Инициализация основного модуля
│ 	│   ├── views.py              # Основные представления 
│ 	│   ├── forms.py              # Основные формы 
│ 	│   └── errors.py             # Обработчики ошибок
│ 	│
│ 	├── models/                   # Модель данных  
│ 	|       ├── __init__.py       # Инициализация основного модуля
│ 	|       ├── base.py           # Базовая модель,наследуются все  модели.
│ 	|       ├── user.py           # Модель Пользователей системы
│ 	│       ├── base.html         # Базовый шаблон админки
│ 	│       ├── role.py           # Модель роли пользователя
│ 	│       ├── log.py            # Модель для логирования действий
│ 	│       ├── quiz_session.py   # Модель сессии квиза
│ 	│       ├── quiz_participant.py # Модель участника квиза
│ 	│       └── quiz_winners.py   # Модель для хранения истории победителей квизов
│ 	│       └── platform_stats.py # Модель для хранения статистики платформы
│ 	│
│ 	│
│ 	├── profile/                  # Создает объект Blueprint
│ 	│   ├── __init__.py           # Инициализация Celery
│ 	│   ├── forms.py             # формы для редактирования профиля,операций с балансом.
│	│   └── views.py              # Содержит маршруты и логику
│	│
│	├── utils/                    # Централизованное управление логированием
│	│   ├── action_logger.py      # Логирование действий пользователей
│	│   ├── error_handlers.py     # Централизованная обработка ошибок
│	│   ├── logger.py             # Настройка логирования для приложения. 
│	│   └── startup.py # Инициализация данных и проверка состояния при старте.
│	│
│	│
│	├── payments/                 # Заглушка на стадии реализации
│	│
│	├── __init__.py               # Инициализация приложения
│	├── debug_celery_worker.py    # Отладка celery
│	├── email.py                  # Логика отправки писем рудимент убрать
│	├── extensions.py       # Регистрация расширений Flask (SQLAlchemy, Migrate и т.д.)
│	├── test_celery_worker.py     # Тест celery
│	├── instance/                 # Конфиденциальные данные (файл SQLite) 
│	├── logs/                     # Логи 
│	├──	migrations/               # Миграции базы данных
│	└── venv/                     # Виртуальное окружение
│	
│	 
│
├── .env                      # Переменные окружения (НЕ включать в репозиторий!)
├── .flaskenv                 # Переменные окружения для Flask
├── .gitignore                # Игнорирование файлов git
├── celery_worker.py 		  # Запуск celery worker
├── config.py                 # Конфигурация приложения
├── error.log                 # Логи
├── hello.py                  # Точка входа в приложение 
├── requirements.txt          # Зависимости проекта 
└── README.md                 # Описание проекта
